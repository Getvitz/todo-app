{"ast":null,"code":"var _jsxFileName = \"/Users/nadya/Desktop/React/kata/src/components/app/app.js\";\nimport React, { Component } from \"react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport TaskList from \"../task-list\";\nimport NewTaskForm from \"../new-task-form\";\nimport Footer from \"../footer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.maxId = 100;\n    this.state = {\n      todoData: [this.createTask(\"Completed Task\"), this.createTask(\"Editing Task\"), this.createTask(\"Active Task\")],\n      filter: \"All\",\n      createTime: \"just added\"\n    };\n\n    this.onFilterChange = filter => {\n      this.setState({\n        filter\n      });\n    };\n\n    this.clearTasks = () => {\n      this.setState(_ref => {\n        let {\n          todoData\n        } = _ref;\n        const newArr = [];\n\n        for (let i = 0; i < todoData.length; i++) {\n          if (!todoData[i].completed) {\n            newArr.push(todoData[i]);\n          }\n        }\n\n        return {\n          todoData: newArr\n        };\n      });\n    };\n\n    this.deleteTask = id => {\n      this.setState(_ref2 => {\n        let {\n          todoData\n        } = _ref2;\n        const idx = todoData.findIndex(el => el.id === id);\n        const newArray = [...todoData.slice(0, idx), ...todoData.slice(idx + 1)];\n        return {\n          todoData: newArray\n        };\n      });\n    };\n\n    this.addTask = text => {\n      const now = new Date();\n      this.createTime = setInterval(() => this.setState({\n        createTime: formatDistanceToNow(now, {\n          includeSeconds: true\n        })\n      }), 1000);\n      const newTask = this.createTask(text);\n      this.setState(_ref3 => {\n        let {\n          todoData\n        } = _ref3;\n        const newArr = [...todoData, newTask];\n        return {\n          todoData: newArr\n        };\n      });\n    };\n\n    this.onToggleDone = id => {\n      this.setState(_ref4 => {\n        let {\n          todoData\n        } = _ref4;\n        const idx = todoData.findIndex(el => el.id === id);\n        const oldTask = todoData[idx];\n        const newTask = { ...oldTask,\n          completed: !oldTask.completed\n        };\n        const newArray = [...todoData.slice(0, idx), newTask, ...todoData.slice(idx + 1)];\n        return {\n          todoData: newArray\n        };\n      });\n    };\n  }\n\n  filterTasks(todoData, filter) {\n    if (filter === \"All\") return todoData;else if (filter === \"Active\") {\n      return todoData.filter(task => !task.completed);\n    } else if (filter === \"Completed\") {\n      return todoData.filter(task => task.completed);\n    }\n  }\n\n  createTask(label) {\n    return {\n      label,\n      completed: false,\n      id: this.maxId++\n    };\n  }\n\n  render() {\n    const {\n      todoData,\n      filter,\n      createTime\n    } = this.state;\n    const visibleTasks = this.filterTasks(todoData, filter);\n    const completedCount = todoData.filter(el => el.completed).length;\n    const leftTasksCount = todoData.length - completedCount;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(NewTaskForm, {\n        addTask: this.addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"main\",\n        children: [/*#__PURE__*/_jsxDEV(TaskList, {\n          todos: visibleTasks,\n          onDeleted: this.deleteTask,\n          onToggleDone: this.onToggleDone,\n          createTime: createTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {\n          leftTasksCount: leftTasksCount,\n          filter: filter,\n          onFilterChange: this.onFilterChange,\n          clearTasks: this.clearTasks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/nadya/Desktop/React/kata/src/components/app/app.js"],"names":["React","Component","formatDistanceToNow","TaskList","NewTaskForm","Footer","App","maxId","state","todoData","createTask","filter","createTime","onFilterChange","setState","clearTasks","newArr","i","length","completed","push","deleteTask","id","idx","findIndex","el","newArray","slice","addTask","text","now","Date","setInterval","includeSeconds","newTask","onToggleDone","oldTask","filterTasks","task","label","render","visibleTasks","completedCount","leftTasksCount"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nimport TaskList from \"../task-list\";\nimport NewTaskForm from \"../new-task-form\";\nimport Footer from \"../footer\";\n\nexport default class App extends Component {\n  maxId = 100;\n\n  state = {\n    todoData: [\n      this.createTask(\"Completed Task\"),\n      this.createTask(\"Editing Task\"),\n      this.createTask(\"Active Task\"),\n    ],\n    filter: \"All\",\n    createTime: \"just added\",\n  };\n\n  // componentDidMount() {\n  //   this.timerID = setInterval(() => this.tick(), 1000);\n  // }\n\n  // componentWillUnmount() {\n  //   clearInterval(this.timerID);\n  // }\n\n  // tick() {\n  //   let now = new Date();\n  //   this.setState({\n  //     createTime: formatDistanceToNow(now, {\n  //       includeSeconds: true,\n  //     }),\n  //   });\n  // }\n\n  onFilterChange = (filter) => {\n    this.setState({ filter });\n  };\n\n  clearTasks = () => {\n    this.setState(({ todoData }) => {\n      const newArr = [];\n      for (let i = 0; i < todoData.length; i++) {\n        if (!todoData[i].completed) {\n          newArr.push(todoData[i]);\n        }\n      }\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  filterTasks(todoData, filter) {\n    if (filter === \"All\") return todoData;\n    else if (filter === \"Active\") {\n      return todoData.filter((task) => !task.completed);\n    } else if (filter === \"Completed\") {\n      return todoData.filter((task) => task.completed);\n    }\n  }\n\n  createTask(label) {\n    return {\n      label,\n      completed: false,\n      id: this.maxId++,\n    };\n  }\n\n  deleteTask = (id) => {\n    this.setState(({ todoData }) => {\n      const idx = todoData.findIndex((el) => el.id === id);\n\n      const newArray = [...todoData.slice(0, idx), ...todoData.slice(idx + 1)];\n      return {\n        todoData: newArray,\n      };\n    });\n  };\n\n  addTask = (text) => {\n    const now = new Date();\n    this.createTime = setInterval(\n      () =>\n        this.setState({\n          createTime: formatDistanceToNow(now, {\n            includeSeconds: true,\n          }),\n        }),\n      1000\n    );\n    const newTask = this.createTask(text);\n    this.setState(({ todoData }) => {\n      const newArr = [...todoData, newTask];\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  onToggleDone = (id) => {\n    this.setState(({ todoData }) => {\n      const idx = todoData.findIndex((el) => el.id === id);\n      const oldTask = todoData[idx];\n      const newTask = { ...oldTask, completed: !oldTask.completed };\n      const newArray = [\n        ...todoData.slice(0, idx),\n        newTask,\n        ...todoData.slice(idx + 1),\n      ];\n      return {\n        todoData: newArray,\n      };\n    });\n  };\n\n  render() {\n    const { todoData, filter, createTime } = this.state;\n    const visibleTasks = this.filterTasks(todoData, filter);\n    const completedCount = todoData.filter((el) => el.completed).length;\n    const leftTasksCount = todoData.length - completedCount;\n\n    return (\n      <div className=\"todoapp\">\n        <NewTaskForm addTask={this.addTask} />\n        <section className=\"main\">\n          <TaskList\n            todos={visibleTasks}\n            onDeleted={this.deleteTask}\n            onToggleDone={this.onToggleDone}\n            createTime={createTime}\n          />\n          <Footer\n            leftTasksCount={leftTasksCount}\n            filter={filter}\n            onFilterChange={this.onFilterChange}\n            clearTasks={this.clearTasks}\n          />\n        </section>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}