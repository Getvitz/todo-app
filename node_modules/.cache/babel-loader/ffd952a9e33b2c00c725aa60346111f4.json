{"ast":null,"code":"var _jsxFileName = \"/Users/nadya/Desktop/React/kata/src/components/task/task.js\";\n// import Task from \"../task\";\n// import \"./todo-list.css\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Component } from \"react/cjs/react.production.min\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Task extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      createTime: \"just added\",\n      isMounted: false\n    };\n  }\n\n  componentDidMount() {\n    this.isMounted = true;\n    this.timerID = this.tick();\n  }\n\n  componentWillUnmount() {\n    this.isMounted = false;\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    const created = new Date();\n    this.createTime = setInterval(() => this.setState({\n      createTime: formatDistanceToNow(created, {\n        includeSeconds: true\n      })\n    }), 4000);\n    this.isMounted = false;\n  }\n\n  render() {\n    const {\n      label,\n      onDeleted,\n      onToggleDone,\n      completed\n    } = this.props;\n    let isMounted = false;\n    let classNames = \"view\";\n\n    if (completed === true) {\n      classNames += \" completed\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: classNames,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"toggle\",\n        type: \"checkbox\",\n        onClick: onToggleDone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"description\",\n          children: label || alert(\"You created empty task! Please delete it and type smth before adding to list!\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"created\",\n          children: this.state.createTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"icon icon-edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"icon icon-destroy\",\n        onClick: onDeleted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nTask.defaultProps = {\n  label: \"Nothing received..\",\n  completed: false,\n  onDeleted: () => {},\n  onToggleDone: () => {}\n};\nTask.propTypes = {\n  label: (props, propName, componentName) => {\n    const value = props[propName];\n    if (typeof value === \"string\") return null;else return new TypeError(`${componentName}: ${propName} must be string`);\n  },\n  completed: (props, propName, componentName) => {\n    const value = props[propName];\n    if (typeof value === \"boolean\") return null;else return new TypeError(`${componentName}: ${propName} must be boolean`);\n  }\n};","map":{"version":3,"sources":["/Users/nadya/Desktop/React/kata/src/components/task/task.js"],"names":["formatDistanceToNow","Component","Task","state","createTime","isMounted","componentDidMount","timerID","tick","componentWillUnmount","clearInterval","created","Date","setInterval","setState","includeSeconds","render","label","onDeleted","onToggleDone","completed","props","classNames","alert","defaultProps","propTypes","propName","componentName","value","TypeError"],"mappings":"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","sourcesContent":["// import Task from \"../task\";\n// import \"./todo-list.css\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Component } from \"react/cjs/react.production.min\";\n\nexport default class Task extends Component {\n  state = {\n    createTime: \"just added\",\n    isMounted: false,\n  };\n\n  static defaultProps = {\n    label: \"Nothing received..\",\n    completed: false,\n    onDeleted: () => {},\n    onToggleDone: () => {},\n  };\n\n  static propTypes = {\n    label: (props, propName, componentName) => {\n      const value = props[propName];\n      if (typeof value === \"string\") return null;\n      else return new TypeError(`${componentName}: ${propName} must be string`);\n    },\n\n    completed: (props, propName, componentName) => {\n      const value = props[propName];\n      if (typeof value === \"boolean\") return null;\n      else\n        return new TypeError(`${componentName}: ${propName} must be boolean`);\n    },\n  };\n\n  componentDidMount() {\n    this.isMounted = true;\n    this.timerID = this.tick();\n  }\n\n  componentWillUnmount() {\n    this.isMounted = false;\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    const created = new Date();\n    this.createTime = setInterval(\n      () =>\n        this.setState({\n          createTime: formatDistanceToNow(created, {\n            includeSeconds: true,\n          }),\n        }),\n      4000\n    );\n    this.isMounted = false;\n  }\n\n  render() {\n    const { label, onDeleted, onToggleDone, completed } = this.props;\n    let isMounted = false;\n    let classNames = \"view\";\n    if (completed === true) {\n      classNames += \" completed\";\n    }\n\n    return (\n      <li className={classNames}>\n        <input className=\"toggle\" type=\"checkbox\" onClick={onToggleDone} />\n        <label>\n          <span className=\"description\">\n            {label ||\n              alert(\n                \"You created empty task! Please delete it and type smth before adding to list!\"\n              )}\n          </span>\n          <span className=\"created\">{this.state.createTime}</span>\n        </label>\n        <button className=\"icon icon-edit\"></button>\n        <button className=\"icon icon-destroy\" onClick={onDeleted}></button>\n      </li>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}