{"ast":null,"code":"var _jsxFileName = \"/Users/nadya/Desktop/React/kata/src/components/task/task.js\";\n// import Task from \"../task\";\n// import \"./todo-list.css\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Component } from \"react/cjs/react.production.min\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Task extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      createTime: \"just added\",\n      isMounted: false\n    };\n    this.isMounted = false;\n  }\n\n  componentDidMount() {\n    this.timerID = this.tick();\n    this.isMounted = true;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n    this.isMounted = false;\n  }\n\n  tick() {\n    if (this.isMounted) {\n      const created = new Date();\n      this.createTime = setInterval(() => this.setState({\n        createTime: formatDistanceToNow(created, {\n          includeSeconds: true\n        })\n      }), 4000);\n    }\n  }\n\n  render() {\n    const {\n      label,\n      onDeleted,\n      onToggleDone,\n      completed\n    } = this.props;\n    let isMounted = false;\n    let classNames = \"view\";\n\n    if (completed === true) {\n      classNames += \" completed\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: classNames,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"toggle\",\n        type: \"checkbox\",\n        onClick: onToggleDone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"description\",\n          children: label || alert(\"You created empty task! Please delete it and type smth before adding to list!\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"created\",\n          children: this.state.createTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"icon icon-edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"icon icon-destroy\",\n        onClick: onDeleted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nTask.defaultProps = {\n  label: \"Nothing received..\",\n  completed: false,\n  onDeleted: () => {},\n  onToggleDone: () => {}\n};\nTask.propTypes = {\n  label: (props, propName, componentName) => {\n    const value = props[propName];\n    if (typeof value === \"string\") return null;else return new TypeError(`${componentName}: ${propName} must be string`);\n  },\n  completed: (props, propName, componentName) => {\n    const value = props[propName];\n    if (typeof value === \"boolean\") return null;else return new TypeError(`${componentName}: ${propName} must be boolean`);\n  }\n};","map":{"version":3,"sources":["/Users/nadya/Desktop/React/kata/src/components/task/task.js"],"names":["formatDistanceToNow","Component","Task","constructor","props","state","createTime","isMounted","componentDidMount","timerID","tick","componentWillUnmount","clearInterval","created","Date","setInterval","setState","includeSeconds","render","label","onDeleted","onToggleDone","completed","classNames","alert","defaultProps","propTypes","propName","componentName","value","TypeError"],"mappings":"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","sourcesContent":["// import Task from \"../task\";\n// import \"./todo-list.css\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Component } from \"react/cjs/react.production.min\";\n\nexport default class Task extends Component {\n  constructor(props) {\n    super(props);\n    this.isMounted = false;\n  }\n\n  state = {\n    createTime: \"just added\",\n    isMounted: false,\n  };\n\n  static defaultProps = {\n    label: \"Nothing received..\",\n    completed: false,\n    onDeleted: () => {},\n    onToggleDone: () => {},\n  };\n\n  static propTypes = {\n    label: (props, propName, componentName) => {\n      const value = props[propName];\n      if (typeof value === \"string\") return null;\n      else return new TypeError(`${componentName}: ${propName} must be string`);\n    },\n\n    completed: (props, propName, componentName) => {\n      const value = props[propName];\n      if (typeof value === \"boolean\") return null;\n      else\n        return new TypeError(`${componentName}: ${propName} must be boolean`);\n    },\n  };\n\n  componentDidMount() {\n    this.timerID = this.tick();\n    this.isMounted = true;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n    this.isMounted = false;\n  }\n\n  tick() {\n    if (this.isMounted) {\n      const created = new Date();\n      this.createTime = setInterval(\n        () =>\n          this.setState({\n            createTime: formatDistanceToNow(created, {\n              includeSeconds: true,\n            }),\n          }),\n        4000\n      );\n    }\n  }\n\n  render() {\n    const { label, onDeleted, onToggleDone, completed } = this.props;\n    let isMounted = false;\n    let classNames = \"view\";\n    if (completed === true) {\n      classNames += \" completed\";\n    }\n\n    return (\n      <li className={classNames}>\n        <input className=\"toggle\" type=\"checkbox\" onClick={onToggleDone} />\n        <label>\n          <span className=\"description\">\n            {label ||\n              alert(\n                \"You created empty task! Please delete it and type smth before adding to list!\"\n              )}\n          </span>\n          <span className=\"created\">{this.state.createTime}</span>\n        </label>\n        <button className=\"icon icon-edit\"></button>\n        <button className=\"icon icon-destroy\" onClick={onDeleted}></button>\n      </li>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}