{"ast":null,"code":"var _jsxFileName = \"/Users/nadya/Desktop/React/kata/src/components/task/task.js\";\nimport { Component } from \"react/cjs/react.production.min\";\nimport EditTaskForm from \"../edit-task-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Task extends Component {\n  render() {\n    const {\n      label,\n      id,\n      onDeleted,\n      onToggleDone,\n      completed,\n      createTimeToNow,\n      editTask,\n      changeLabel,\n      edited\n    } = this.props;\n    let {\n      check\n    } = this.props;\n    let classNames = \"view\";\n\n    if (completed === true) {\n      classNames += \" completed\";\n      check = \"true\";\n    }\n\n    if (edited === true) {\n      classNames += \" editing\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: classNames,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"toggle\",\n        type: \"checkbox\",\n        onClick: onToggleDone,\n        readOnly: true // onChange={onToggleDone}\n        ,\n        check: check\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"description\",\n          children: label || alert(\"You created empty task! Please delete it and type smth before adding to list!\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"created\",\n          children: createTimeToNow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"icon icon-edit\",\n        onClick: editTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"icon icon-destroy\",\n        onClick: onDeleted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), edited ? /*#__PURE__*/_jsxDEV(EditTaskForm, {\n        id: id,\n        label: label,\n        changeLabel: changeLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this) : null]\n    }, id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nTask.defaultProps = {\n  label: \"Nothing received..\",\n  completed: false,\n  onDeleted: () => {},\n  onToggleDone: () => {} // checked: false,\n\n};\nTask.propTypes = {\n  label: (props, propName, componentName) => {\n    const value = props[propName];\n    if (typeof value === \"string\") return null;else return new TypeError(`${componentName}: ${propName} must be string`);\n  },\n  completed: (props, propName, componentName) => {\n    const value = props[propName];\n    if (typeof value === \"boolean\") return null;else return new TypeError(`${componentName}: ${propName} must be boolean`);\n  }\n};","map":{"version":3,"sources":["/Users/nadya/Desktop/React/kata/src/components/task/task.js"],"names":["Component","EditTaskForm","Task","render","label","id","onDeleted","onToggleDone","completed","createTimeToNow","editTask","changeLabel","edited","props","check","classNames","alert","defaultProps","propTypes","propName","componentName","value","TypeError"],"mappings":";AAAA,SAASA,SAAT,QAA0B,gCAA1B;AACA,OAAOC,YAAP,MAAyB,mBAAzB;;AAEA,eAAe,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAwB1CG,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA,EAFI;AAGJC,MAAAA,SAHI;AAIJC,MAAAA,YAJI;AAKJC,MAAAA,SALI;AAMJC,MAAAA,eANI;AAOJC,MAAAA,QAPI;AAQJC,MAAAA,WARI;AASJC,MAAAA;AATI,QAUF,KAAKC,KAVT;AAWA,QAAI;AAAEC,MAAAA;AAAF,QAAY,KAAKD,KAArB;AACA,QAAIE,UAAU,GAAG,MAAjB;;AACA,QAAIP,SAAS,KAAK,IAAlB,EAAwB;AACtBO,MAAAA,UAAU,IAAI,YAAd;AACAD,MAAAA,KAAK,GAAG,MAAR;AACD;;AACD,QAAIF,MAAM,KAAK,IAAf,EAAqB;AACnBG,MAAAA,UAAU,IAAI,UAAd;AACD;;AAED,wBACE;AAAa,MAAA,SAAS,EAAEA,UAAxB;AAAA,8BACE;AACE,QAAA,SAAS,EAAC,QADZ;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,OAAO,EAAER,YAHX;AAIE,QAAA,QAAQ,MAJV,CAKE;AALF;AAME,QAAA,KAAK,EAAEO;AANT;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAA,gCAKE;AAAM,UAAA,SAAS,EAAC,aAAhB;AAAA,oBACGV,KAAK,IACJY,KAAK,CACH,+EADG;AAFT;AAAA;AAAA;AAAA;AAAA,gBALF,eAWE;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA,oBAA2BP;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAsBE;AAAQ,QAAA,SAAS,EAAC,gBAAlB;AAAmC,QAAA,OAAO,EAAEC;AAA5C;AAAA;AAAA;AAAA;AAAA,cAtBF,eAuBE;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAsC,QAAA,OAAO,EAAEJ;AAA/C;AAAA;AAAA;AAAA;AAAA,cAvBF,EAwBGM,MAAM,gBACL,QAAC,YAAD;AAAc,QAAA,EAAE,EAAEP,EAAlB;AAAsB,QAAA,KAAK,EAAED,KAA7B;AAAoC,QAAA,WAAW,EAAEO;AAAjD;AAAA;AAAA;AAAA;AAAA,cADK,GAEH,IA1BN;AAAA,OAASN,EAAT;AAAA;AAAA;AAAA;AAAA,YADF;AA8BD;;AA5EyC;AAAvBH,I,CACZe,Y,GAAe;AACpBb,EAAAA,KAAK,EAAE,oBADa;AAEpBI,EAAAA,SAAS,EAAE,KAFS;AAGpBF,EAAAA,SAAS,EAAE,MAAM,CAAE,CAHC;AAIpBC,EAAAA,YAAY,EAAE,MAAM,CAAE,CAJF,CAKpB;;AALoB,C;AADHL,I,CASZgB,S,GAAY;AACjBd,EAAAA,KAAK,EAAE,CAACS,KAAD,EAAQM,QAAR,EAAkBC,aAAlB,KAAoC;AACzC,UAAMC,KAAK,GAAGR,KAAK,CAACM,QAAD,CAAnB;AACA,QAAI,OAAOE,KAAP,KAAiB,QAArB,EAA+B,OAAO,IAAP,CAA/B,KACK,OAAO,IAAIC,SAAJ,CAAe,GAAEF,aAAc,KAAID,QAAS,iBAA5C,CAAP;AACN,GALgB;AAOjBX,EAAAA,SAAS,EAAE,CAACK,KAAD,EAAQM,QAAR,EAAkBC,aAAlB,KAAoC;AAC7C,UAAMC,KAAK,GAAGR,KAAK,CAACM,QAAD,CAAnB;AACA,QAAI,OAAOE,KAAP,KAAiB,SAArB,EAAgC,OAAO,IAAP,CAAhC,KAEE,OAAO,IAAIC,SAAJ,CAAe,GAAEF,aAAc,KAAID,QAAS,kBAA5C,CAAP;AACH;AAZgB,C","sourcesContent":["import { Component } from \"react/cjs/react.production.min\";\nimport EditTaskForm from \"../edit-task-form\";\n\nexport default class Task extends Component {\n  static defaultProps = {\n    label: \"Nothing received..\",\n    completed: false,\n    onDeleted: () => {},\n    onToggleDone: () => {},\n    // checked: false,\n  };\n\n  static propTypes = {\n    label: (props, propName, componentName) => {\n      const value = props[propName];\n      if (typeof value === \"string\") return null;\n      else return new TypeError(`${componentName}: ${propName} must be string`);\n    },\n\n    completed: (props, propName, componentName) => {\n      const value = props[propName];\n      if (typeof value === \"boolean\") return null;\n      else\n        return new TypeError(`${componentName}: ${propName} must be boolean`);\n    },\n  };\n\n  render() {\n    const {\n      label,\n      id,\n      onDeleted,\n      onToggleDone,\n      completed,\n      createTimeToNow,\n      editTask,\n      changeLabel,\n      edited,\n    } = this.props;\n    let { check } = this.props;\n    let classNames = \"view\";\n    if (completed === true) {\n      classNames += \" completed\";\n      check = \"true\";\n    }\n    if (edited === true) {\n      classNames += \" editing\";\n    }\n\n    return (\n      <li key={id} className={classNames}>\n        <input\n          className=\"toggle\"\n          type=\"checkbox\"\n          onClick={onToggleDone}\n          readOnly\n          // onChange={onToggleDone}\n          check={check}\n        />\n        <label\n        // role=\"presentation\"\n        // onClick={onToggleDone}\n        // onKeyPress={onToggleDone}\n        >\n          <span className=\"description\">\n            {label ||\n              alert(\n                \"You created empty task! Please delete it and type smth before adding to list!\"\n              )}\n          </span>\n          <span className=\"created\">{createTimeToNow}</span>\n        </label>\n        <button className=\"icon icon-edit\" onClick={editTask}></button>\n        <button className=\"icon icon-destroy\" onClick={onDeleted}></button>\n        {edited ? (\n          <EditTaskForm id={id} label={label} changeLabel={changeLabel} />\n        ) : null}\n      </li>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}